// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metalfm/transactor/tr (interfaces: Transactor)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock/tr.go github.com/metalfm/transactor/tr Transactor
//

// Package mock_tr is a generated GoMock package.
package mock_tr

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactor is a mock of Transactor interface.
type MockTransactor[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder[T]
	isgomock struct{}
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder[T any] struct {
	mock *MockTransactor[T]
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor[T any](ctrl *gomock.Controller) *MockTransactor[T] {
	mock := &MockTransactor[T]{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor[T]) EXPECT() *MockTransactorMockRecorder[T] {
	return m.recorder
}

// InTx mocks base method.
func (m *MockTransactor[T]) InTx(ctx context.Context, fn func(T) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTx indicates an expected call of InTx.
func (mr *MockTransactorMockRecorder[T]) InTx(ctx, fn any) *MockTransactorInTxCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTx", reflect.TypeOf((*MockTransactor[T])(nil).InTx), ctx, fn)
	return &MockTransactorInTxCall[T]{Call: call}
}

// MockTransactorInTxCall wrap *gomock.Call
type MockTransactorInTxCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactorInTxCall[T]) Return(arg0 error) *MockTransactorInTxCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactorInTxCall[T]) Do(f func(context.Context, func(T) error) error) *MockTransactorInTxCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactorInTxCall[T]) DoAndReturn(f func(context.Context, func(T) error) error) *MockTransactorInTxCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
